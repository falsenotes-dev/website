// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id             String           @id @default(cuid()) @map("_id")
  email          String?
  username       String           @unique
  name           String?
  bio            String?
  password       String?
  emailVerified  DateTime?        @map("email_verified")
  image          String?
  githubprofile  String?
  location       String?
  verified       Boolean          @default(false)
  falsemember    Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  githubId       String?
  googleId       String?          @map("google_id")
  settings       UserSettings?
  notifications  Notification[]
  posts          Post[]
  comments       Comment[]
  likes          Like[]
  commentlikes   CommentLike[]
  Followings     Follow[]         @relation("Follower")
  Followers      Follow[]         @relation("Following")
  tagfollower    TagFollow[]      @relation("TagFollower")
  bookmarks      Bookmark[]
  readinghistory ReadingHistory[]

  @@map("users")
}

model Post {
  id          String           @id @default(cuid()) @map("_id")
  title       String
  content     String?
  subtitle    String?
  cover       String?
  views       Int              @default(0)
  author      User             @relation(fields: [authorId], references: [id])
  authorId    String
  url         String           @unique
  readingTime String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  published   Boolean          @default(false)
  publishedAt DateTime?
  updated     Boolean          @default(false)
  tags        PostTag[]
  comments    Comment[]
  likes       Like[]
  savedUsers  Bookmark[]
  readedUsers ReadingHistory[]
  drafts      DraftPost[]
  shares      PostShare[]

  @@index([createdAt])
  @@map("posts")
}

//draft post model to store autosave drafts of posts in editor
model DraftPost {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  content   String
  subtitle  String?
  cover     String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@map("drafts")
}

model PostShare {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("postshares")
}

model Comment {
  id        String        @id @default(cuid()) @map("_id")
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  replies   Comment[]     @relation("CommenttoComment")
  parentId  String?       @map("parent_id")
  parent    Comment?      @relation("CommenttoComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([createdAt])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model CommentLike {
  id        String   @id @default(uuid()) @map("_id")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("commentlikes")
}

model Tag {
  id           String      @id @default(uuid()) @map("_id")
  name         String      @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  posts        PostTag[]
  followingtag TagFollow[] @relation("FollowingTag")

  @@map("tags")
}

model PostTag {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posttags")
}

model Follow {
  id          String   @id @default(uuid()) @map("_id")
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("follows")
}

model TagFollow {
  id         String   @id @default(uuid()) @map("_id")
  follower   User     @relation("TagFollower", fields: [followerId], references: [id])
  followerId String
  tag        Tag      @relation("FollowingTag", fields: [tagId], references: [id])
  tagId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tagfollows")
}

model Notification {
  id         String   @id @default(uuid()) @map("_id")
  content    String
  read       Boolean  @default(false)
  receiver   User     @relation(fields: [receiverId], references: [id])
  receiverId String
  type       String?
  url        String
  senderId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([createdAt])
  @@map("notifications")
}

model Bookmark {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookmarks")
}

model UserSettings {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  appearance String   @default("system")
  language   String   @default("en")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("usersettings")
}

model ReadingHistory {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("readinghistory")
}
