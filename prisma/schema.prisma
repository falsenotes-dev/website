// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
  
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id        String      @id @default(cuid())
  email     String?   @unique
  username      String?
  name      String?
  bio       String?
  password  String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  githubprofile String
  location String?
  verified Boolean @default(false)
  falsemember Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  githubId String?
  settings UserSettings?
  notifications Notification[]
  posts     Post[]
  comments  Comment[]
  likes     Like[]
  commentlikes CommentLike[]
  Followings Follow[] @relation("Follower")
  Followers Follow[] @relation("Following")
  tagfollower TagFollow[] @relation("TagFollower")
  bookmarks Bookmark[]
  readinghistory ReadingHistory[]

  @@map("users")
}

model Post {
  id        String      @id @default(cuid())
  title     String
  content   String @db.Text
  subtitle  String? @db.VarChar(280)
  cover    String?
  views    Int @default(0)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  url       String   @unique
  readingTime String? @db.VarChar(250)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  visibility String @default("public")
  updated Boolean @default(false)
  tags      PostTag[]
  comments  Comment[]
  likes     Like[]
  savedUsers Bookmark[]
  readedUsers ReadingHistory[]
  drafts DraftPost[]
  @@index([createdAt])
  @@map("posts")
}

//draft post model to store autosave drafts of posts in editor
model DraftPost {
  id        String      @id @default(cuid())
  title     String
  content   String @db.Text
  subtitle  String? @db.VarChar(280)
  cover    String?
  views    Int @default(0)
  post      Post     @relation(fields: [postId], references: [id])
  postId  String
  url       String   @unique
  readingTime String? @db.VarChar(250)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  updated Boolean @default(false)

  @@index([createdAt])
  @@map("drafts")
}
model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likes     CommentLike[]
  replies   Comment[]  @relation("CommenttoComment")
  parentId   Int?   
  parent    Comment?  @relation("CommenttoComment", fields: [parentId], references: [id])
  @@index([createdAt])
  @@map("comments")
}

model Like {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment     @relation(fields: [commentId], references: [id])
  commentId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("commentlikes")
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  posts     PostTag[]
  followingtag TagFollow[] @relation("FollowingTag")

  @@map("tags")
}

model PostTag {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posttags")
}

model Follow {
  id        Int      @id @default(autoincrement())
  follower  User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following User     @relation("Following", fields: [followingId], references: [id])
  followingId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("follows")
}

model TagFollow {
  id        Int      @id @default(autoincrement())
  follower  User     @relation("TagFollower", fields: [followerId], references: [id])
  followerId  String
  tag       Tag      @relation("FollowingTag", fields: [tagId], references: [id])
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("tagfollows")
}

model Notification {
  id        Int      @id @default(autoincrement())
  content   String
  read      Boolean @default(false)
  receiver  User     @relation(fields: [receiverId], references: [id])
  receiverId  String
  type      String?
  url       String
  senderId  Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@map("notifications")
}

model Bookmark {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookmarks")
}

model UserSettings {
  id        Int      @id @default(autoincrement())
  user    User     @relation(fields: [userId], references: [id])
  userId  String @unique
  appearance String @default("system")
  language String @default("en")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usersettings")
}

model ReadingHistory {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("readinghistory")
}