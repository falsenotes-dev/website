// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URL")
}

model User {
  id                String              @id @default(cuid()) @map("_id")
  email             String              @unique
  username          String              @unique
  name              String?
  bio               String?
  password          String?
  emailVerified     DateTime?           @map("email_verified")
  image             String?
  cover             String?
  githubprofile     String?
  location          String?
  verified          Boolean             @default(false)
  verifiedAt        DateTime?           @map("verified_at")
  falsemember       Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  githubId          String?
  googleId          String?             @map("google_id")
  twitterId         String?             @map("twitter_id")
  twitterProfile    String?             @map("twitter_profile")
  isPublication     Boolean             @default(false)
  settings          UserSettings?
  notifications     Notification[]
  posts             Post[]
  publicationsPosts Post[]              @relation("PublicationPost")
  comments          Comment[]
  likes             Like[]
  commentlikes      CommentLike[]
  Followings        Follow[]            @relation("Follower")
  Followers         Follow[]            @relation("Following")
  tagfollower       TagFollow[]         @relation("TagFollower")
  bookmarks         Bookmark[]
  readinghistory    ReadingHistory[]
  lists             List[]
  savedLists        ListSaving[]
  urls              UserWebsite[]
  publications      PublicationAuthor[]
  writers           PublicationAuthor[] @relation("PublicationAuthor")
  searchHistory     UserSearchHistory[]

  @@map("users")
}

model UserWebsite {
  id        String   @id @default(uuid()) @map("_id")
  value     String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("userwebsites")
}

model PublicationAuthor {
  id            String   @id @default(cuid()) @map("_id")
  publication   User     @relation(name: "PublicationAuthor", fields: [publicationId], references: [id])
  publicationId String
  author        User     @relation(fields: [authorId], references: [id])
  authorId      String
  accessLevel   String   @default("writer")
  visibility    String   @default("public")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Post {
  id             String           @id @default(cuid()) @map("_id")
  title          String
  content        String
  subtitle       String?
  cover          String?
  views          Int              @default(0)
  author         User             @relation(fields: [authorId], references: [id])
  authorId       String
  publication    User?            @relation("PublicationPost", fields: [publicationId], references: [id])
  publicationId  String?
  url            String           @unique
  readingTime    String?
  seoTitle       String?
  seoDescription String?
  canonicalUrl   String?
  ogVersion      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  published      Boolean          @default(false)
  publishedAt    DateTime         @default(now())
  modifiedAt     DateTime?
  updated        Boolean          @default(false)
  pinned         Boolean          @default(false)
  tags           PostTag[]
  comments       Comment[]
  likes          Like[]
  savedUsers     Bookmark[]
  readedUsers    ReadingHistory[]
  drafts         DraftPost[]
  shares         PostShare[]
  allowComments  Boolean          @default(true)
  allowLikes     Boolean          @default(true)
  lists          PostList[]

  @@index([createdAt])
  @@map("posts")
}

//draft post model to store autosave drafts of posts in editor
model DraftPost {
  id        String   @id @default(cuid()) @map("_id")
  title     String
  content   String
  subtitle  String?
  cover     String?
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  url       String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([createdAt])
  @@map("drafts")
}

model PostShare {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("postshares")
}

model List {
  id          String       @id @default(uuid()) @map("_id")
  name        String
  description String?
  visibility  String       @default("public")
  sortOder    String       @default("newest")
  author      User         @relation(fields: [authorId], references: [id])
  authorId    String
  slug        String       @unique
  posts       PostList[]
  savedUsers  ListSaving[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("lists")
}

model PostList {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("postlists")
}

model ListSaving {
  id        String   @id @default(uuid()) @map("_id")
  list      List     @relation(fields: [listId], references: [id])
  listId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("listsaving")
}

model Comment {
  id        String        @id @default(cuid()) @map("_id")
  content   String
  author    User          @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post          @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  likes     CommentLike[]
  replies   Comment[]     @relation("CommenttoComment")
  parentId  String?       @map("parent_id")
  parent    Comment?      @relation("CommenttoComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([createdAt])
  @@map("comments")
}

model Like {
  id        String   @id @default(uuid()) @map("_id")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("likes")
}

model CommentLike {
  id        String   @id @default(uuid()) @map("_id")
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  comment   Comment  @relation(fields: [commentId], references: [id])
  commentId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("commentlikes")
}

model Tag {
  id           String      @id @default(uuid()) @map("_id")
  name         String      @unique
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  posts        PostTag[]
  followingtag TagFollow[] @relation("FollowingTag")

  @@map("tags")
}

model PostTag {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("posttags")
}

model Follow {
  id          String   @id @default(uuid()) @map("_id")
  follower    User     @relation("Follower", fields: [followerId], references: [id])
  followerId  String
  following   User     @relation("Following", fields: [followingId], references: [id])
  followingId String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("follows")
}

model TagFollow {
  id         String   @id @default(uuid()) @map("_id")
  follower   User     @relation("TagFollower", fields: [followerId], references: [id])
  followerId String
  tag        Tag      @relation("FollowingTag", fields: [tagId], references: [id])
  tagId      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("tagfollows")
}

model Notification {
  id         String   @id @default(uuid()) @map("_id")
  content    String
  read       Boolean  @default(false)
  receiver   User     @relation(fields: [receiverId], references: [id])
  receiverId String
  type       String?
  url        String
  senderId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([createdAt])
  @@map("notifications")
}

model Bookmark {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookmarks")
}

model UserSettings {
  id         String   @id @default(uuid()) @map("_id")
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @unique
  appearance String   @default("system")
  language   String   @default("en")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("usersettings")
}

model UserSearchHistory {
  id        String   @id @default(uuid()) @map("_id")
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  search    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("usersearchhistory")
}

model ReadingHistory {
  id        String   @id @default(uuid()) @map("_id")
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  erased    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("readinghistory")
}
